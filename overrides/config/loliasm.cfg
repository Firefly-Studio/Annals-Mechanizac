# Configuration file

bakedquad {
    # Classes where BakedQuad::new calls need to be redirected - <default: [net.minecraft.client.renderer.block.model.FaceBakery]>
    S:classesThatCallBakedQuadCtor <
        net.minecraft.client.renderer.block.model.FaceBakery
     >

    # Log classes that need their BakedQuad::new calls redirected - <default: true>
    B:logClassesThatCallBakedQuadCtor=true

    # Saves RAM by removing BakedQuad instance variables, redirecting BakedQuad creation to specific BakedQuad child classes. This will be forcefully turned off when Optifine is installed as it is incompatible - <default: true>
    B:squashBakedQuads=true
}


canonicalization {
    # Deduplicate Model Conditions. Enable this if you do not have Foamfix installed - <default: false>
    B:modelConditionCanonicalization=false

    # Deduplicate ResourceLocation and ModelResourceLocation instances - <default: true>
    B:resourceLocationCanonicalization=true
}


datastructures {
    # Optimizing various data structures around Minecraft - <default: true>
    B:optimizeDataStructures=true

    # Optimizing FurnaceRecipes. FastFurnace will see very little benefit when this option is turned on - <default: true>
    B:optimizeFurnaceRecipeStore=true
}


launchwrapper {
    # Invalidate and clean cache entries when the game finishes loading (onto the main screen). Loading into the first world may take longer. This option wouldn't do anything if 'cleanupLaunchClassLoaderLate' is 'true' - <default: false>
    B:cleanCachesOnGameLoad=false

    # Cleanup some redundant data structures in LaunchClassLoader at the earliest point possible (when LoliASM is loaded). Helpful for those that don't have enough RAM to load into the game. This can induce slowdowns while loading the game in exchange for more available RAM - <default: false>
    B:cleanupLaunchClassLoaderEarly=false

    # Cleanup some redundant data structures in LaunchClassLoader at the latest point possible (when the game reaches the Main Screen). This is for those that have enough RAM to load the game and do not want any slowdowns while loading. Note: if 'cleanupLaunchClassLoaderEarly' is 'true', this option will be ignored - <default: true>
    B:cleanupLaunchClassLoaderLate=true

    # Disable the unusused Package Manifest map. This option coincides with Foamfix's 'removePackageManifestMap' option - <default: true>
    B:disablePackageManifestMap=true

    # Disabling caching of classes. This will induce major slowdowns to game/world loads in exchange for more available RAM - <default: false>
    B:noClassCache=false

    # Disabling caching of resources (Class Bytes). This will induce slowdowns to game/world loads in exchange for more available RAM - <default: false>
    B:noResourceCache=false

    # Weaken the caching of classes. This allows the GC to free up more space when the caches are no longer needed. If 'noClassCache' is 'true', this option will be ignored - <default: true>
    B:weakClassCache=true

    # Weaken the caching of resources (Class Bytes). This allows the GC to free up more space when the caches are no longer needed. If 'noResourceCache' is 'true', this option will be ignored. This option coincides with Foamfix's 'weakenResourceCache' option - <default: true>
    B:weakResourceCache=true
}


misc {
    # Optimizes miscellaneous things that cannot be categorized specifically - <default: true>
    B:optimizeMiscellaneous=true
}


modfixes {
    # EXPERIMENTAL: When ChickenASM (Library of CodeChickenLib and co.) is installed, ClassHierarchyManager can cache a lot of Strings and seem to be unused in any transformation purposes. This clears ClassHierarchyManager of those redundant strings. This option will be ignored when ChickenASM isn't installed - <default: true>
    B:cleanupChickenASMClassHierarchyManager=true

    # When Immersive Engineering is installed, sometimes it or it's addons can induce an ArrayIndexOutOfBoundsException in BlockIEBase#getPushReaction. This option will be ignored when IE isn't installed - <default: true>
    B:fixBlockIEBaseArrayIndexOutOfBoundsException=true
}


remapper {
    # Optimizing Forge's Remapper for not storing redundant entries - <default: true>
    B:optimizeFMLRemapper=true
}


rendering {
    # Optimizes some rendering features, not game-breaking; however, negligible at times - <default: true>
    B:optimizeSomeRendering=true
}


